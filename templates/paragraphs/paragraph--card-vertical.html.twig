{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set figure_attributes = create_attribute() %}
{% set content_attributes = create_attribute() %}
{% set title_attributes = create_attribute() %}
{% set link_attributes = create_attribute() %}
{% set text_attributes = create_attribute() %}
{% set secondlinkwrapper_attributes = create_attribute() %}
{% set secondlink_attributes = create_attribute() %}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    paragraph.field_paragraph_card_colour.0.entity.field_class.value,
    'ubc-card',
    'relative',
    'h-full',
    'hover--cursor-pointer',
    'flex',
    'flex-col',
    'shadow',
    'hover--shadow-lg',
    'group',
    'img-zoom',
    'isolate',
  ]
%}
{%
  set img_classes = [
    'img-cover',
    'ubc-card__media',
    'mt-0',
    'flex-none',
    'overflow-hidden',
  ]
%}
{%
  set content_classes = [
    'p-8',
    'ubc-card__content',
    'first-child--mt-0',
  ]
%}
{%
  set title_classes = [
    'text-xl',
    'mt-0',
  ]
%}
{%
  set link_classes = [
    'no-underline',
    'hover--no-underline',
    'text-ubc-blue',
    'link-expand',
  ]
%}
{%
  set text_classes = [
    'mt-0',
  ]
%}
{%
  set second_link_wrapper_classes = [
    'mt-auto',
    'px-8',
    'pb-8',
  ]
%}
{%
  set second_link_classes = [
    'unit-button',
    'unit-button--simple',
  ]
%}

{# addresses certain special characters being stripped out or replaced in external URLs #}
{% if content.field_paragraph_card_link["#items"][0].isExternal() == true %}
  {% set link_url = content.field_paragraph_card_link.0['#url'].uri %}
{% else %}
  {% set link_url = paragraph.field_paragraph_card_link.0.url %}
{% endif %}

{% block paragraph %}
  <article{{ attributes.addClass(classes) }}>
  {% block content %}
    {% if not (paragraph.field_paragraph_card_image.isEmpty == true) and content.field_paragraph_card_image is defined %}
      <figure{{ figure_attributes.addClass(img_classes) }}>
        {{ content.field_paragraph_card_image.0 }}
      </figure>
    {% endif %}
    <div{{ content_attributes.addClass(content_classes) }}>
    {% if not (paragraph.field_paragraph_card_link.isEmpty == true) and content.field_paragraph_card_link is defined %}
      <h3{{ title_attributes.addClass(title_classes) }}>
        <a{{ link_attributes.addClass(link_classes) }} href="{{ link_url }}" rel="bookmark">
          {{ paragraph.field_paragraph_card_title.value }}</a>
      </h3>
    {% else %}
      <h3{{ title_attributes.addClass(title_classes) }}>{{ paragraph.field_paragraph_card_title.value }}</h3>
    {% endif %}
    {% if not (paragraph.field_paragraph_card_text.isEmpty == true) and content.field_paragraph_card_text is defined %}
      <p{{ text_attributes.addClass(text_classes) }}>{{ paragraph.field_paragraph_card_text.value }}</p>
    {% endif %}
    </div>
    <p{{ secondlinkwrapper_attributes.addClass(second_link_wrapper_classes) }}><a{{ secondlink_attributes.addClass(second_link_classes) }} href="{{ link_url }}" aria-label="{{ paragraph.field_paragraph_card_title.value }} details">{{ content.field_paragraph_card_link.0['#title'] }}</a></p>
  {% endblock %}
  </article>
{% endblock paragraph %}
