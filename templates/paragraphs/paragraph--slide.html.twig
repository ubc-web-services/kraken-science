{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set caption_wrapper_attributes = create_attribute() %}
{% set caption_attributes = create_attribute() %}
{% set title_attributes = create_attribute() %}
{%
  set slide_classes = [
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    'relative',
    'carousel__cell',
    'has-gradient--after',
  ]
%}
{%
  set caption_wrapper_classes = [
    'container',
    'z-40',
    'flex',
    'flex-col',
    'justify-end',
    'mx-auto',
    'carousel__content',
    'absolute',
    'inset-0',
  ]
%}
{%
  set caption_classes = [
    'text-white',
    'container-sm',
    'py-8',
    'md--py-24',
    'px-5',
    'md--px-4',
  ]
%}
{%
  set title_classes = [
    'mt-0',
    'text-3xl',
    'text-white',
    'md--text-7xl',
  ]
%}

{% block paragraph %}
  <article{{ attributes.addClass(slide_classes) }}>
    {% block content %}
      {% if not paragraph.field_slide_with_no_image.value %}
        {{ content.field_slide_image.0 }}
      {% endif %}
      {% if not (paragraph.field_slide_title.isEmpty == true) and content.field_slide_title is defined %}
      <div{{ caption_wrapper_attributes.addClass(caption_wrapper_classes) }}>
        <div{{ caption_attributes.addClass(caption_classes) }}>
          <h2{{ title_attributes.addClass(title_classes) }}>{{ paragraph.field_slide_title.value }}</h2>
        </div>
      </div>
      {% endif %}
    {% endblock %}
  </article>
{% endblock paragraph %}
