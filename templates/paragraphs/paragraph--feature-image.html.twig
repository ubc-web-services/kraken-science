{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set wrapper_attributes = create_attribute() %}
{% set figure_attributes = create_attribute() %}
{% set content_attributes = create_attribute() %}
{% set contentwrapper_attributes = create_attribute() %}
{% set title_attributes = create_attribute() %}
{% set link_attributes = create_attribute() %}
{% set button_attributes = create_attribute() %}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    paragraph.field_paragraph_width_settings.0.entity.field_class.value ? paragraph.field_paragraph_width_settings.0.entity.field_class.value|clean_class,
    paragraph.field_region_vertical_spacing.0.entity.field_class.value ? paragraph.field_region_vertical_spacing.0.entity.field_class.value|clean_class,
    paragraph.field_region_vertical_spacing.1.entity.field_class.value ? paragraph.field_region_vertical_spacing.1.entity.field_class.value|clean_class,
    'bg-dark',
    'group',
  ]
%}
{%
  set wrapper_classes = [
    'relative',
    paragraph.field_paragraph_feature_link.value or paragraph.field_paragraph_feature_title.value ? 'has-gradient--after',
  ]
%}
{%
  set figure_classes = [
    'img-cover',
    'mt-0',
    'object-center',
    'absolute',
    'inset-0',
  ]
%}
{%
  set contentwrapper_classes = [
    'p-4',
    'w-full',
    'z-20',
    'md--p-12',
    'relative',
    'flex',
    'flex-col',
    'text-white',
    'min-h-[300px]',
  ]
%}
{%
  set content_classes = [
    paragraph.field_paragraph_position_setting.0.entity.field_class.value,
    'first-child--mt-0',
  ]
%}
{%
  set title_classes = [
    'mt-0',
  ]
%}
{%
  set link_classes = [
    'no-underline',
    'hover--no-underline',
    'text-white',
    'link-expand',
    'hover--text-ubc-blue-polar',
  ]
%}
{%
  set button_classes = [
    'unit-button',
    'unit-button--simple',
  ]
%}

{% block paragraph %}
<article{{ attributes.addClass(classes) }}>
  <div{{ wrapper_attributes.addClass(wrapper_classes) }}>

  {% block content %}
    <figure{{ figure_attributes.addClass(figure_classes) }}>
    {{ content.field_paragraph_feature_image.0 }}
    </figure>
    {% if paragraph.field_paragraph_feature_link.value or paragraph.field_paragraph_feature_title.value %}
      <div{{ contentwrapper_attributes.addClass(contentwrapper_classes) }}>
        <div{{ content_attributes.addClass(content_classes) }}>
        {% if paragraph.field_paragraph_feature_title.value %}
          <h2{{ title_attributes.addClass(title_classes) }}>
            <a{{ link_attributes.addClass(link_classes) }} href="{{ paragraph.field_paragraph_feature_link.0.url }}" rel="bookmark">{{ paragraph.field_paragraph_feature_title.value }}</a>
          </h2>
        {% endif %}
        {% if paragraph.field_paragraph_feature_caption.value %}
          <p class="mt-0">{{ paragraph.field_paragraph_feature_caption.value }}</p>
        {% endif %}
        {% if paragraph.field_paragraph_feature_link.value %}
          <p><button{{ button_attributes.addClass(button_classes) }}>{{ content.field_paragraph_feature_link[0]['#title'] }}</button>
          </p>
        {% endif %}
        <div>
    </div>
    {% endif %}
  {% endblock %}
  </div>
</article>
{% endblock paragraph %}
