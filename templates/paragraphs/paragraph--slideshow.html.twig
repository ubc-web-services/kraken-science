{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set layout_attributes = create_attribute() %}
{% set header_attributes = create_attribute() %}
{% set title_attributes = create_attribute() %}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    paragraph.field_region_vertical_spacing.0.entity.field_class.value ? paragraph.field_region_vertical_spacing.0.entity.field_class.value|clean_class,
    paragraph.field_region_vertical_spacing.1.entity.field_class.value ? paragraph.field_region_vertical_spacing.1.entity.field_class.value|clean_class,
  ]
%}
{%
  set layout_classes = [
    paragraph.field_region_width.0.entity.field_class.value ? paragraph.field_region_width.0.entity.field_class.value,
  ]
%}
{%
  set header_classes = [
    '',
  ]
%}
{%
  set title_classes = [
    'mt-0',
    'pb-2',
    'h3',
  ]
%}

{% if paragraph.field_region_width.0.entity.field_class.value is empty %}
  {%
    set padding_classes = [
      'px-5',
      'md--px-4',
    ]
  %}
{% endif %}
{# add as variable to prevent multiple calls #}
{%
  set region_title = paragraph.field_paragraph_group_title.value
%}

{% block paragraph %}
<section{{ attributes.addClass(classes) }}>
  {% if region_title|length > 0 %}
  <header{{ header_attributes.addClass(header_classes, layout_classes,padding_classes) }}>
    <h2{{ title_attributes.addClass(title_classes) }}>{{ region_title }}</h2>
  </header>
  {% endif %}
  <div{{ layout_attributes.addClass(layout_classes) }}>
    {% block content %}
      {% if clf_vue %}
        <tiny-slider speed="200" items="1" slide-by="page"
        mouse-drag center auto-width gutter="0" edge-padding="0">
          {{ content.field_slide }}
        </tiny-slider>
      {% else %}
      {{ attach_library('kraken/tiny-slider') }}
        <div class="slideshow">
          {{ content.field_slide }}
        </div>
      {% endif %}
    {% endblock %}
  </div>
</section>
{% endblock paragraph %}
